{"version":3,"sources":["file:///Users/baitengfei/code/EscapeRoom/EscapeRoomMVP/assets/Scripts/Manager/EventManager.ts"],"names":["_decorator","log","ccclass","property","EventManager","init","eventList","addListener","eventName","callback","target","console","error","targetId","_id","enum","removeListener","dispatch","args","k","call"],"mappings":";;;;;;;;;;AAESA,MAAAA,U,OAAAA,U;AAAuBC,MAAAA,G,OAAAA,G;;;;;;;;;OAC1B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;8BAGjBI,Y,WADZF,OAAO,CAAC,cAAD,C,2BAAR,MACaE,YADb,CAC0B;AAEtB;AAGA;AACW,eAAJC,IAAI,GAAG;AACV,cAAI,KAAKC,SAAT,EAAoB;AAChB;AACH;;AACD,eAAKA,SAAL,GAAiB,EAAjB;AACH,SAXqB,CAatB;;;AACkB,eAAXC,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,MAAtB,EAA8B;AAC5C,eAAKL,IAAL,GAD4C,CAE5C;;AACA,cAAI,CAAC,KAAKC,SAAL,CAAeE,SAAf,CAAL,EAAgC;AAC5B,iBAAKF,SAAL,CAAeE,SAAf,IAA4B,EAA5B;AACH;;AACD,cAAI,CAACE,MAAL,EAAa;AACTC,YAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8BJ,SAA9B;AACA;AACH;;AACD,cAAIK,QAAQ,GAAGH,MAAM,CAACI,GAAtB;;AACA,cAAI,CAACD,QAAL,EAAe;AACX,gBAAIH,MAAM,CAACK,IAAX,EAAiB;AACbL,cAAAA,MAAM,CAACI,GAAP,GAAaJ,MAAM,CAACK,IAApB;AACH;AACJ;;AACD,eAAKT,SAAL,CAAeE,SAAf,EAA0BK,QAA1B,IAAsC;AAClCJ,YAAAA,QAAQ,EAAEA,QADwB;AAElCC,YAAAA,MAAM,EAAEA;AAF0B,WAAtC;AAIH,SAlCqB,CAoCtB;;;AACqB,eAAdM,cAAc,CAACR,SAAD,EAAYE,MAAZ,EAAoB;AACrC,eAAKL,IAAL,GADqC,CAErC;;AACA,cAAI,CAACK,MAAL,EAAa;AACTC,YAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8BJ,SAA9B;AACA;AACH;;AACD,cAAIK,QAAQ,GAAGH,MAAM,CAACI,GAAtB;;AACA,cAAI,CAACD,QAAL,EAAe;AACX,gBAAIH,MAAM,CAACK,IAAX,EAAiB;AACbL,cAAAA,MAAM,CAACI,GAAP,GAAaJ,MAAM,CAACK,IAApB;AACH;AACJ;;AACD,cAAI,CAAC,KAAKT,SAAL,CAAeE,SAAf,CAAD,IAA8B,CAAC,KAAKF,SAAL,CAAeE,SAAf,EAA0BK,QAA1B,CAAnC,EAAwE;AACpE;AACH,WAFD,MAGK;AACD,mBAAO,KAAKP,SAAL,CAAeE,SAAf,EAA0BK,QAA1B,CAAP,CADC,CAED;AACH;AACJ,SAzDqB,CA2DtB;;;AACe,eAARI,QAAQ,CAACT,SAAD,EAAYU,IAAZ,EAA0B;AACzC;AAAA,cAD2BA,IAC3B;AAD2BA,YAAAA,IAC3B,GADoC,IACpC;AAAA;;AACI,eAAKb,IAAL,GADJ,CAEI;;AACA,cAAI,KAAKC,SAAL,IAAkB,KAAKA,SAAL,CAAeE,SAAf,CAAtB,EAAiD;AAC7C,iBAAK,IAAIW,CAAT,IAAc,KAAKb,SAAL,CAAeE,SAAf,CAAd,EAAyC;AACrC,mBAAKF,SAAL,CAAeE,SAAf,EAA0BW,CAA1B,EAA6BV,QAA7B,CAAsCW,IAAtC,CAA2C,KAAKd,SAAL,CAAeE,SAAf,EAA0BW,CAA1B,EAA6BT,MAAxE,EAAgFQ,IAAhF;AACH;AACJ;AACJ;;AArEqB,O,UAGfZ,S,GAAY,E;;AAqEvBL,MAAAA,GAAG,CAAC,wBAAD,CAAH","sourcesContent":["//管理事件，订阅、移除和触发\n\nimport { _decorator, Component, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('EventManager')\nexport class EventManager {\n\n    //存储事件信息\n    static eventList = {};\n\n    //初始化事件列表，如果已经存在则不需要执行\n    static init() {\n        if (this.eventList) {\n            return;\n        }\n        this.eventList = {};\n    }\n\n    //target 如果是非组件类需要加上字段 _id\n    static addListener(eventName, callback, target) {\n        this.init();\n        //console.log(\"add lis \", eventName);//,callback,target);\n        if (!this.eventList[eventName]) {\n            this.eventList[eventName] = {};\n        }\n        if (!target) {\n            console.error(\"target miss \", eventName);\n            return;\n        }\n        var targetId = target._id;\n        if (!targetId) {\n            if (target.enum) {\n                target._id = target.enum;\n            }\n        }\n        this.eventList[eventName][targetId] = {\n            callback: callback,\n            target: target,\n        };\n    }\n\n    //移除事件订阅\n    static removeListener(eventName, target) {\n        this.init();\n        //console.log(\"rem lis \", eventName)//,target);\n        if (!target) {\n            console.error(\"target miss \", eventName);\n            return;\n        }\n        var targetId = target._id;\n        if (!targetId) {\n            if (target.enum) {\n                target._id = target.enum;\n            }\n        }\n        if (!this.eventList[eventName] || !this.eventList[eventName][targetId]) {\n            return;\n        }\n        else {\n            delete this.eventList[eventName][targetId];\n            //if(this.eventList[eventName])\n        }\n    }\n\n    //触发事件订阅\n    static dispatch(eventName, args:any=null)//arguments\n    {\n        this.init();\n        // console.log(\"dispatch  \", eventName, \"   args :\", args);\n        if (this.eventList && this.eventList[eventName]) {\n            for (let k in this.eventList[eventName]) {\n                this.eventList[eventName][k].callback.call(this.eventList[eventName][k].target, args);\n            }\n        }\n    }\n}\n\nlog(\"EventManager init over\");\n\n"]}