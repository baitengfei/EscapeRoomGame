{"version":3,"sources":["file:///Users/baitengfei/code/EscapeRoom/EscapeRoomMVP/assets/Scripts/Manager/SceneManager.ts"],"names":["Component","_decorator","Node","instantiate","EventEnum","EventManager","ResManager","SceneBase","ccclass","property","SceneManager","type","mSceneList","mSceneLoadCount","mCurrentSceneIndex","mbBigScene","mbNeedHideBackBtn","onLoad","Instance","start","that","i","name","LoadPrefab","prefab","sceneNode","active","parent","mSceneParentNode","LoadSceneFinish","getChildByName","sceneBase","getComponent","push","hide","InitScene","show","CloseAllScene","length","element","hideAll","GoLeftScene","oldIndex","scheduleOnce","dispatch","ChangeScene","GoRightScene","BackToMainScene","ToMainScene","GoInterScene"],"mappings":"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","sourcesContent":["import { Component, _decorator, Node, Prefab, instantiate } from \"cc\";\nimport { EventEnum } from \"../Data/GameEnum\";\nimport { EventManager } from \"./EventManager\";\nimport  ResManager  from \"./ResManager\";\nimport { SceneBase } from \"../Data/SceneBase\";\nimport { GameData } from \"../Data/GameData\";\n\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('SceneManager')\nexport class SceneManager extends Component {\n    public static Instance:SceneManager = null!;\n\n    onLoad() {\n        SceneManager.Instance = this;\n    }\n    \n    @property({type:Node})\n    mSceneParentNode:Node;\n\n    mSceneList:SceneBase[] = [];\n    mSceneLoadCount = 0;\n    start() {\n        this.mSceneLoadCount = 0;\n        // 加载场景分包资源\n        let that = this;\n        for (let i = 0; i < 4; i++) {\n            let name = \"S\" + (i + 1);\n            ResManager.Instance.LoadPrefab(name, name, (prefab:Prefab)=>{\n                var sceneNode:Node = instantiate(prefab);\n                sceneNode.active = true;\n                sceneNode.parent = this.mSceneParentNode;\n                sceneNode.name = name;\n\n                that.mSceneLoadCount += 1;\n                if (that.mSceneLoadCount == 4) {\n                    that.LoadSceneFinish();\n                }\n            });\n        }\n    }\n\n    LoadSceneFinish() {\n        for (let i = 0; i < 4; i++) {\n            let name = \"S\" + (i + 1);\n            let sceneNode:Node = this.mSceneParentNode.getChildByName(name);\n            let sceneBase:SceneBase = sceneNode.getComponent(SceneBase);\n\n            this.mSceneList.push(sceneBase);\n            sceneBase.hide();\n        } \n    }\n\n    InitScene() {\n        this.mbBigScene = true;\n        this.mCurrentSceneIndex = 0;\n        this.mSceneList[this.mCurrentSceneIndex].show();\n    }\n\n    CloseAllScene() {\n        for (let i = 0; i < this.mSceneList.length; i++) {\n            const element = this.mSceneList[i];\n            element.hideAll();\n        }\n    }\n\n    // 大场景的索引\n    mCurrentSceneIndex = 0;\n    mbBigScene:boolean = false;\n    mbNeedHideBackBtn:boolean = false;\n\n    GoLeftScene() {\n\n        \n        if (this.mCurrentSceneIndex >= this.mSceneList.length - 1) {\n            return;\n        }\n        \n\n        let oldIndex = this.mCurrentSceneIndex;\n        this.mCurrentSceneIndex += 1;\n\n        this.mSceneList[oldIndex].hide();\n\n        this.scheduleOnce(()=>{\n            this.mSceneList[this.mCurrentSceneIndex].show();\n        }, 0.5);\n\n        EventManager.dispatch(EventEnum.ChangeScene);\n    }\n\n    GoRightScene() {\n        if (this.mCurrentSceneIndex <= 0) {\n            return;\n        }\n        let oldIndex = this.mCurrentSceneIndex;\n        this.mCurrentSceneIndex -= 1;\n\n        this.mSceneList[oldIndex].hide();\n        this.scheduleOnce(()=>{\n            this.mSceneList[this.mCurrentSceneIndex].show();\n        }, 0.5);\n\n        EventManager.dispatch(EventEnum.ChangeScene);\n    }\n    BackToMainScene() {\n        this.mbBigScene = true;\n        this.mSceneList[this.mCurrentSceneIndex].ToMainScene();\n        EventManager.dispatch(EventEnum.ChangeScene);\n    }\n    GoInterScene() {\n        this.mbBigScene = false;\n        EventManager.dispatch(EventEnum.ChangeScene);\n    }\n}"]}